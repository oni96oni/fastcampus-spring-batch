ch3. 스프링 배치 기초 이해하기
    1. Task 기반 배치와 Chunk 기반 배치
        ★배치를 처리할 수 있는 방법은 2가지
        1. Task 기반
            코드 작성 쉬움(배치 처리 과정이 비교적 쉬운 경우 사용)
            대량 처리를 하는 경우 더 복잡!
            하나의 큰 덩어리를 여러 덩어리로 나누어 처리하기 부적합
        2. Chunk 기반
            ItemReader, ItemProcessor, ItemWriter의 관계 이해 필요
            대량처리를 하는경우 Task보다 쉽게 구현
            예를 들어 10,000개의 데이터중 1,000개씩 10개의 덩어리로 수행

        항상 Configuration은 하나켜놔야한다!

        chunk기반 step의 종료 시점은?
            itemReader에서 null을 리턴할때까지 step은 반복된다!

        reader와 processor는 하나씩 데이터를 처리 하지만 writer는 리스트로 처리한다.

        <INPUT, OUTPUT>chunk(int)
            reader에서 INPUT 을 return (먼저 읽어들인 다음에, ItemProcessor에게 전달)
            ItemProcessor에서 OUTPUT을 return (ItemWriter에게 전달, INPUT과 OUTPUT은 같은 타입일수도 아닐수도 있다)
            ItemWriter에서 OUTPUT을 받아서 처리(WRITE)

        StepExecution은 읽은 Item 크기를 저장할 수 있으니 당연히 조회도 가능하다.

        배치 실행을 더 유연하게 -> spring batch parameter

    JobParameters 이해
        2가지 방법으로 사용한다.
        객체를 직접 사용 스프링에서 제공하는 Spring EL 사용

        배치 실행에 필요한 값을 parameter를 통해 외부에서 주입

        JobParameters는 외부에서 주입된 parameter를 관리하는 객체

        String parameter = jobParameters.getString(key, defaultValue);
        @Value("#{jobParameters[key]}")

    @JobScope와 @StepScope 이해
        @Scope는 어떤 시점에 bean을 생성/소멸 시킬지 bean의 lifecycle을 설정하는것이다.
        애플리케이션 시작되는 시점에서 생성 종료되는 시점에 소멸

        @JobScope는 job 실행 시점에 생성 끝나면 소멸
            Step에 선언
        @StepScope는 step 실행 시점에 생성 끝나면 소멸
            Tasklet, Chunk(ItemReader, ItemProcessor, ItemWriter)에 선언(사용가능)

        spring의 @Scope와 같은것
            @Scope("job")과 @JobScope는 같은것
            @Scope("step")과 @StepScope는 같은것
            완벽히 같은것이 아니라 의미가!
            왜 이런걸로 생명주기를 관리? -> Thread-Safe위해서, spring EL을 위해
            이 둘이 아니면 spring EL을 사용할 수 없다.
            왜???


        Job과 Step 라이프사이클에 의해 생성되기 때문에 Thread-Safe 하다.
            왜???

        @Value("#{jobParameters[key]}")를 사용하기 위해 @JobScope와 @StepScope는 필수
            왜???

        scope은 항상 빈이어야 한다.

    ItemReader interface 구조
        배치 대상 데이터를 읽기 위한 설정
            파일, DB, 네트워크 등에서 읽기 위함

        Step에 ItemReader는 필수

        기본 제공되는 ItemReader 구현체
            file, jdbc, jpa, hibernate, kafka, etc...

        ItemReader 구현체가 없으면 직접 개발

        ItemStream은 ExecutionContext로 read, write 정보를 저장

        ListItemReader 예제

    CSV 파일 데이터 읽기
        ItemReader 구현체 중 하나인 FlatFileItemReader를 사용해서 파일로 저장된 데이터를 읽어 객체에 매핑
        로그로 출력해보자

    JDBC 데이터 읽기
        JDBC로 데이터를 읽을 때는 2가지 방법 존재

        Cursor 기반 조회
            배치 처리가 완료될 때 까지 DB Connection이 연결
            DB Connection 빈도가 낮아 성능이 좋은 반면, 긴 Connection 유지 시간 필요
            하나의 Connection에서 처리되기 때문에, Thread-Safe 하지 않음
            모든 결과를 메모리에 할당하기 때문에, 더 많은 메모리를 사용

        Paging 기반 조회
            페이징 단위로 DB Connection을 연결
            DB Connection 빈도가 높아 비교적 성능이 낮은 반면, 짧은 Connection 유지 시간 필요
            매번 Connection을 하기 때문에 Thread Safe
            페이징 단위의 결과만 메모리에 할당하기 때문에, 비교적 더 적은 메모리를 사용

        JdbcCursorItemReader vs JdbcPagingItemReader
            둘다 JDBC를 실행하기 위한 Datasource 필요
            조회된 데이터 row를 클래스와 매핑하기 위한 beanMapper, rowMapper 설정 가능
            전자는 sql로 조회 쿼리 설정, 후자는 queryProvider로 조회 쿼리 설정
            전자는 fetchSize 설정 가능, 후자는 pageSize 설정 가능

        step이 실행될 수 있도록 job에 추가해주어야 한다.

        Cursor와 Paging 차이 이해하고 ItemReader 사용하는것이 중요하다.
        jdbcPagingItemReader 예제 만들어보기

    JPA 데이터 읽기
        jdbc와 마찬가지로 cursor와 paging 방식으로 데이터를 읽을 수 있다.

        차이점은 DataSource가 아닌 EntityManagerFactory를 사용한다는 것이다.

        우선 JPA에서 Person 객체를 Entity로 만들어야 한다. -> @Entity 사용
        @NoArgsConstructor를 사용해서 기본생성자 추가

        jpaPagingItemReader 예제 만들어보기

    ItemWriter interface 구조 이해
        ItemWriter는 마지막으로 배치 처리 대상 데이터를 어떻게 처리할 지 결정
        Step에서 ItemWriter는 필수
        ex) ItemReader에서 읽은 데이터를 DB에 저장, API로 서버에 요청, 파일에 데이터를 write
        항상 write가 아님
            데이터를 최종 마무리를 하는것이 ItemWriter

        chunk에서는 itemWriter가 필수!

        ItemWriter는 write 메소드를 가지고 있다. -> parameter는 List<T> items 이다.
        processor에서 가공한 데이터를 writer에게 넘겨주기때문!

    CSV 파일 데이터 쓰기
        csv 파일에 데이터 작성을 위해 FlatFileItemWriter를 사용해보자

        Reader에서 생성했던 100개의 test name이 생성된것을 확인할 수 있다.

        헤더 설정
            headerCallback을 사용해서 헤더를 설정할 수 있다. 문자열사용
        푸터 설정
            footerCallback을 사용해서 푸터를 설정할 수 있다. 문자열사용

        append 속성으로 true -> 기존 파일에 덮어 씌우기, false -> 기존 파일을 지우고 재생성

    JDBC 데이터 쓰기
        JdbcBatchItemWriter를 사용해서 데이터를 DB에 저장해보자
        단건 처리가 아니기 때문에 비교적 높은 성능!
            무엇보다 성능이 좋은것? 한번에 하나씩 처리하는것보다

        단건씩 cud하는것이 아니라 bulk로 처리(한방에)

        mysql에서 bulk insert를 사용하기 위해서는
          jpa:
            hibernate:
              ddl-auto: update

              를 지정해주어야 한다. application.yml에 추가해주자

        db에서 select * from person;을 하면 100개의 데이터가 들어간것을 확인할 수 있다.
            확인할 때 주의! spring_batch schema로 콘솔켜야 확인가능 다른 스키마 들어가면 안된다.

    JPA 데이터 쓰기
        JpaItemWriter는 JPA entity를 사용해서 데이터를 저장할 수 있다.

        Entity를 하나씩 EntityManager.persist 또는 EntityManager.merge로 insert

        show-sql: true를 설정하면 jpa에서 실행되는 쿼리가 로그로 다 찍히게된다.

        id를 직접 할당하지 않는 이상 usePersist를 true로 설정해야한다.
            이게 없으면? -> insert로 실행되는데? id를 우리가 직접 정해주는것이 아니니까!
            반복문 수정한거 참고하기

    ItemProcessor interface구조 이해, 과제 요구사항 설명
        ItemReader에서 읽은 데이터를 가공 또는 필터링을 한다.
        ItemProcessor는 ItemReader에서 읽은 데이터를 가공 또는 필터링을 한다.
            데이터를 가공한다는 뜻은 -> Input을 Output으로 변환한다는 뜻이다.
            필터링 -> chunk를 최종처리하는 ItemWriter에 데이터를 보낼지말지 결정할 수 있다는 뜻이다.
                ItemReader에서 null을 리턴하면 -> chunk 처리가 끝났다는 의미
                ItemProcessor에서 null을 리턴하면 -> ItemWriter에 해당 Item을 처리하지 않겠다라는 뜻이다.
        Step의 ItemProcessor는 optional
        ItemProcessor는 필수는 아니지만, 책임을 분리하기 위해 사용

        ItemWriter의 실행 여부를 판단 할 수 있도록 필터링하는 역할을 한다.
            ItemWriter는 not null만 처리한다.

        chunk에서 ItemWriter는 하나만 사용가능하지만. CompositeItemProcessor를 사용하면 여러개를 사용할 수 있다.

    [과제] CSV 파일 데이터 읽고 MySQL DB에 insert 하기
        csv 파일 데이터를 읽어 h2 db에 데이터 저장하는 배치 개발
        Reader : 100개의 person data를 csv 파일에서 읽는다.
        Processor : allow_duplicate 파라미터로 person.name의 중복 여부 조건을 판단.
            allow_duplicate가 true면 중복 허용, false면 중복 불가
                true면 모든 person return
                false면 중복된 데이터니까 null로 return
        Writer : 2개의 ItemWriter를 사용해서 Person H2 DB에 저장 후 몇건 저장됐는지 log를 찍는다.
            Person 저장 ItemWriter와 log 출력 ItemWriter를 CompositeItemWriter를 사용해 하나로 만들것