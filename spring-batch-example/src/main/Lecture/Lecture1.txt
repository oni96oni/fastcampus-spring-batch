ch2 스프링 배치 아키텍쳐
    스프링 배치 기본 구조
        잡런처가 잡을실행 잡이 스텝을 실행
        잡 리포지토리는 db 또는 메모리에 실행할 수 있도록 메타 데이터를 관리

        ★Job은 배치의 실행 단위를 의미!

        Job은 N개의 Step을 실행할 수 있으며, 흐름을 관리할 수 있다.
        Step은 Chunk기반과 Task기반으로 나뉘며
            Chunk 기반 : 하나의 큰 덩어리를 n개씩 나눠서 실행
            Task 기반 : 하나의 작업을 기반으로 실행

        Chunk 기반의 Step은 ItemReader, ItemProcessor, ItemWriter를 사용가 있다
            Chunk가 명확히 체계를 나누어서 실행하는것을 제공
        ★여기서 Item이란 배치 처리 대상 객체를 의미한다.

        ★ItemReader는 배치 처리 대상 객체(즉, Item)을 읽어 ItemProcessor 또는 ItemWriter에게 전달한다.
        ★ItemProcessor는 Input 객체를 output 객체로 필터링 또는 프로세싱해서 ItemWriter에게 전달한다.
            예를 들어 ItemReader에서 읽은 데이터를 수정 또는 ItemWriter 대상인지 필터링한다.
            ItemProcessor는 optional 하다.
            ItemProcessor가 하는 일을 ItemReader 또는 ItemWriter가 대신할 수 있다.
        ★ItemWriter는 배치 처리 대상 객체를 처리한다.
            예를 들어 DB에 update를 하거나, 처리 대상 사용자에게 알림을 보낸다.

    스프링 배치 테이블 구조와 이해
        메타 데이터를 관리하는 테이블 구조를 알아보자
        배치 실행과 실행 결과를 저장하기 위한 테이블 -> 메타 테이블

        BATCH_JOB_INSTANCE
            Job이 실행되며 생성되는 최상위 계층의 테이블
            job_name과 job_key를 기준으로 하나의 row가 생성되며, 같은 job_name과 job_key가 저장될 수 없다.(중복 생성 불가)
            job_key는 BATCH_JOB_EXECUTION_PARAMS에 저장되는 Parameter를 나열해 암호화해 저장한다.
        BATCH_JOB_EXECUTION
            job이 실행되는 동안 시작/종료 시간, job상태 등을 관리
            job이 실행되는 시점에 생성된다.
            하나의 BATCH_JOB_INSTANCE는 여러개의 BATCH_JOB_EXECUTION을 가질 수 있다.
        BATCH_JOB_EXECUTION_PARAMS
            job을 실행하기 위해 주입된 parameter 정보 저장

        BATCH_JOB_EXECUTION_CONTEXT
            job이 실행되며 공유해야할 데이터를 직렬화해 저장
        BATCH_STEP_EXECUTION
            Step이 실행되는 동안 필요한 데이터 또는 실행된 결과 저장
        BATCH_STEP_EXECUTION_CONTEXT
            Step이 실행되며 공유해야할 데이터를 직렬화해 저장
